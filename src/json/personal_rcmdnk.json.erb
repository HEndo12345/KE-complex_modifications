{
  "title": "Personal rules (@rcmdnk)",
  "rules": [
    {
      "description": "For HHKB ((Shift-)Esc to grave accent (tilde))",
      "extra_descriptions": [
        "Only for HHKB (vendor id = 2131).",
        "And only for terminal, vim, emacs.",
        "As HHKB's ESC is place for &#096; (gravce accent (back quote)) and ~ (tilde) at other keyboards.",
        "Better to bind Control-[ to ESC as in below setting."
      ],
      "manipulators": [
        {
          "type": "basic",
          "from": <%= from("escape", [], ["any"]) %>,
          "to": <%= to([["grave_accent_and_tilde"]]) %>,
          "conditions": [ <%= device_if("hhkb") %>, <%= frontmost_application_if("emacs_key_bindings_exception") %> ]
        }
      ]
    },
    {
      <%# {% post_card /blog/2016/10/06/computer-mac-iterm/ MacのiTerm/ターミナルでメタキー(Alt)を使う方法 %} %>
      "description": "iTerm2 command (Meta) keys",
      "extra_description_level": 1,
      "extra_descriptions": [
        "Command to Option (i.e. Meta key) for other than n, v, w."
      ],
      "manipulators":
      <%=
        # Other than n, v, w
        iterm2Keys = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l",
                     "m", "o", "p", "q", "r", "s", "t", "u", "x", "y", "z"]
        each_key(
          source_keys_list: iterm2Keys,
          from_mandatory_modifiers: ["command"],
          from_optional_modifiers: ["shift"],
          dest_keys_list: iterm2Keys,
          to_modifiers: ["option"],
          conditions: [frontmost_application_if("iterm2", false)],
          as_json: true
        )
      %>
    },
    {
      "description": "ESC (or Control-[) sends ESC EISU ESC",
      "extra_descriptions": [
        "For terminal, vim, emacs.",
        "Send ESC, EISU and ESC to stop changing at IME, disable IME and change to Normal mode at Vim at once.",
        "Need to disable ESC at copy mode if GNU screen is used. Add following line in your .screenrc to disable ESC at copy mode:<br><code>bindkey -m ^[ eval ''</code>"
      ],
      "manipulators":
      <%=
        each_key(
          source_keys_list: ["escape", hash_from("open_bracket", ["control"])],
          dest_keys_list: [[], []],
          to_post_events: ["escape", "japanese_eisuu", "escape"],
          conditions: [frontmost_application_if("emacs_key_bindings_exception", false)],
          as_json: true
        )
      %>
    },
    {
      "description": "Copy and Paste, ctrl-z/x/c/v to cmd-z/x/c/v",
      "extra_descriptions": [
        "For other than terminal, vim, emacs.",
        "Copy and Paste with control key."
      ],
      "manipulators":
      <%=
        manipulators = each_key(
          source_keys_list: ["z", "x", "c", "v"],
          dest_keys_list: ["z", "x", "c", "v"],
          from_mandatory_modifiers: ["control"],
          from_optional_modifiers: ["shift"],
          to_modifiers: ["command"],
          conditions: [frontmost_application_unless("emacs_key_bindings_exception", false)],
          as_json: true
        )
      %>
    },
    {
      "description": "Next/Prev by ctrl-i/o, option-left/right arrow",
      "extra_descriptions": [
        "For other than terminal, vim, emacs."
      ],
      "manipulators":
      <%=
        manipulators = each_key(
          source_keys_list: ["i", "o"],
          dest_keys_list: ["close_bracket", "open_bracket"],
          from_mandatory_modifiers: ["control"],
          to_modifiers: ["command"],
          conditions: [frontmost_application_unless("emacs_key_bindings_exception", false)]
        )
        manipulators += each_key(
          source_keys_list: ["right_arrow", "left_arrow"],
          dest_keys_list: ["close_bracket", "open_bracket"],
          from_mandatory_modifiers: ["option"],
          to_modifiers: ["command"],
          conditions: [frontmost_application_unless("emacs_key_bindings_exception", false)]
        )
        JSON.generate(manipulators)
      %>
    },
    {
      "description": "Browsers (cmd-(shift-)tab to cmd-opt-right(left))",
      "extra_descriptions": [
        "For Firefox, Chrome, Safari."
      ],
      "manipulators": [
        {
          "type": "basic",
          "from": <%= from("tab", ["command"]) %>,
          "to": <%= to([["right_arrow", ["command", "option"]]]) %>,
          "conditions": [ <%= frontmost_application_if("browser") %> ]
        },
        {
          "type": "basic",
          "from": <%= from("tab", ["command", "shift"]) %>,
          "to": <%= to([["left_arrow", ["command", "option"]]]) %>,
          "conditions": [ <%= frontmost_application_if("browser") %> ]
        }
      ]
    },
    {
      "description": "Microsoft Office (ctrl-h, font, superscript/subscript)",
      "extra_descriptions": [
        "For Microsoft Office (Word, PowerPoint, Excel)."
      ],
      "manipulators": [
        <%# ctrl-h %>
        {
          "type": "basic",
          "from": <%= from("h", ["control"]) %>,
          "to": <%= to([["delete_or_backspace"]]) %>,
          "conditions": [ <%= frontmost_application_if("office") %> ]
        },
        <%# font Symbol %>
        {
          "type": "basic",
          "from": <%= from("s", ["control", "command", "shift"]) %>,
          "to": <%= to([["t", ["command"]], ["tab"], ["s"], ["y"], ["m"], ["b"], ["o"], ["l"], ["return_or_enter"]]) %>,
          "conditions": [ <%= frontmost_application_if("office") %> ]
        },
        <%# font Helvetica %>
        {
          "type": "basic",
          "from": <%= from("h", ["control", "command", "shift"]) %>,
          "to": <%= to([["t", ["command"]], ["tab"], ["h"], ["e"], ["l"], ["v"], ["e"], ["t"], ["i"], ["c"], ["a"], ["return_or_enter"]]) %>,
          "conditions": [ <%= frontmost_application_if("office") %> ]
        },
        <%# Superscript %>
        {
          "type": "basic",
          "from": <%= from("equal_sign", ["control"]) %>,
          "to": <%= to([["t", ["command"]],
                        ["tab"], ["tab"], ["tab"], ["tab"], ["tab"], ["tab"], ["tab"], ["tab"], ["tab"], ["tab"],
                        ["spacebar"], ["return_or_enter"]]) %>,
          "conditions": [ <%= frontmost_application_if("office") %> ]
        },
        <%# Subscript %>
        {
          "type": "basic",
          "from": <%= from("hyphen", ["control"]) %>,
          "to": <%= to([["t", ["command"]],
                        ["tab"], ["tab"], ["tab"], ["tab"], ["tab"], ["tab"], ["tab"], ["tab"], ["tab"], ["tab"], ["tab"],
                        ["spacebar"], ["return_or_enter"]]) %>,
          "conditions": [ <%= frontmost_application_if("office") %> ]
        }
      ]
    },
    {
      "description": "Change cmd-ctrl-h/j/k/l to arrow keys",
      "extra_descriptions": [
        "Vim like move."
      ],
      "manipulators":
      <%=
        each_key(
          source_keys_list: ["h", "j", "k", "l"],
          dest_keys_list: ["left_arrow", "down_arrow", "up_arrow", "right_arrow"],
          from_mandatory_modifiers: ["control", "command"],
          as_json: true
        )
      %>
    },
    {
      "description": "Window Actions",
      "extra_descriptions": [
        "Window actions with AppleScript.",
        "Need [rcmdnk/AppleScript](https://github.com/rcmdnk/AppleScript) to be installed."
      ],
      "manipulators": [
        <%=
          askeys = [
            ["4", ["command"], "close"],
            ["4", ["control"], "close"],
            ["a", ["control", "command"], "closeToDock"],
            ["spacebar", ["option"], "focusMenu"],
            ["period", ["option"], "moveForMon"],
            ["slash", ["command", "shift"], "moveForMonAll"],
            ["y", ["control", "shift"], "windowMoveLeft"],
            ["u", ["control", "shift"], "windowMoveDown"],
            ["i", ["control", "shift"], "windowMoveUp"],
            ["o", ["control", "shift"], "windowMoveRight"],
            ["y", ["command", "control", "shift"], "winMoveScreenLeft"],
            ["u", ["command", "control", "shift"], "winMoveScreenDown"],
            ["i", ["command", "control", "shift"], "winMoveScreenUp"],
            ["o", ["command", "control", "shift"], "winMoveScreenRight"],
            ["return_or_enter", ["command", "control"], "wsFull"],
            ["return_or_enter", ["command", "shift"], "wsFull"],
            ["return_or_enter", ["command", "control", "shift"], "wsHalf"],
            ["h", ["command", "shift"], "wsHalfLeft"],
            ["j", ["command", "shift"], "wsHalfBottom"],
            ["k", ["command", "shift"], "wsHalfTop"],
            ["l", ["command", "shift"], "wsHalfRight"],
            ["y", ["command", "shift"], "windowResizeWidthMinus"],
            ["u", ["command", "shift"], "windowResizeHeightPlus"],
            ["i", ["command", "shift"], "windowResizeHeightMinus"],
            ["o", ["command", "shift"], "windowResizeWidthPlus"]
          ]
          manipulators = ""
          for key in askeys do
            manipulators += "{
              \"type\": \"basic\",
              \"from\": #{from(key[0], key[1])},
              \"to\": [{\"shell_command\": \"osascript ~/Library/Scripts/#{key[2]}.scpt\"}]
            },"
          end
          manipulators.chop!
          manipulators
        %>
      ]
    },
    {
      <%# -------------------------------------------------- %>
      <%# Need to enable Mouse Key from System Preferences (Accessibility->Mouse and Trackpad) %>
      <%# -------------------------------------------------- %>
      "description": "Mouse cursor move",
      "extra_descriptions": [
        "Need [rcmdnk/AppleScript](https://github.com/rcmdnk/AppleScript) to be installed.",
        "Need to enable Mouse Key from System Preferences&rarr;Accessibility&rarr;Mouse and Trackpad."
      ],
      "manipulators":
      <%=
        mousekeys = {
          "h"=>"mouseMoveLeft",
          "j"=>"mouseMoveDown",
          "k"=>"mouseMoveUp",
          "l"=>"mouseMoveRight"
        }
        mousekeys.each do |k, v|
          mousekeys[k] = {"shell_command": "osascript ~/Library/Scripts/#{v}.scpt"}
        end

        manipulators = each_key(
          source_keys_list: mousekeys.keys,
          from_mandatory_modifiers: ["control", "shift"],
          dest_keys_list: mousekeys.values
        )
        manipulators += each_key(
          source_keys_list: ["n", "m", "p"],
          from_mandatory_modifiers: ["control", "shift"],
          dest_keys_list: ["button1", "button3", "button2"]
        )
        JSON.generate(manipulators)
      %>
    },
    {
      "description": "Control-[ to ESC",
      "manipulators": [
        {
          "type": "basic",
          "from": <%= from("open_bracket", ["control"]) %>,
          "to": <%= to([["escape"]]) %>
        }
      ]
    },
    {
      "description": "Others (Dock, Sleep, Delete, IME, Misison Control, Spotlight)",
      "manipulators": [
        <%# Focus on Dock %>
        {
          "type": "basic",
          "from": <%= from("m", ["control"]) %>,
          "to": <%= to([["f3", ["control"]]]) %>
        },
        <%# Sleep %>
        {
          "type": "basic",
          "from": <%= from("l", ["option"]) %>,
          "to": <%= to([["eject", ["control", "shift"]]]) %>
        },
        <%# Delete %>
        {
          "type": "basic",
          "from": <%= from("d", ["command"]) %>,
          "to": <%= to([["delete_or_backspace", ["command"]]]) %>
        },
        {
          "type": "basic",
          "from": <%= from("delete_or_backspace", ["control"]) %>,
          "to": <%= to([["delete_or_backspace", ["command"]]]) %>
        },
        <%# IME %>
        {
          "type": "basic",
          "from": <%= from("spacebar", ["control"]) %>,
          "to": <%= to([["spacebar", ["option", "control"]]]) %>
        },
        {
          "type": "basic",
          "from": <%= from("spacebar", ["command"]) %>,
          "to": <%= to([["spacebar", ["option", "control"]]]) %>
        },
        <%# Mission Control %>
        {
          "type": "basic",
          "from": <%= from("h", ["command", "control", "shift"]) %>,
          "to": <%= to([["left_arrow", ["control"]]]) %>
        },
        {
          "type": "basic",
          "from": <%= from("l", ["command", "control", "shift"]) %>,
          "to": <%= to([["right_arrow", ["control"]]]) %>
        },
        <%# Spotlight %>
        {
          "type": "basic",
          "from": <%= from("f", ["command", "control"]) %>,
          "to": <%= to([["spacebar", ["command"]]]) %>
        }
      ]
    }
  ]
}
